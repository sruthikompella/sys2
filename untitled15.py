# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dDi2BEukbrs91UWjRUitTD61hfHDswCb
"""

import pandas as pd
import numpy as np
from IPython.display import display
from IPython import get_ipython # This import seems unnecessary based on the code provided, but keeping it as it was in the original snippet.

# Assuming HAZARD_THRESHOLDS, analyze_trends, plot_hazard_trends, analyze_button are defined elsewhere
# Placeholder for demonstration purposes
HAZARD_THRESHOLDS = {
    'drought': {'precip_percentile': 20, 'min_duration': 5},
    'heavy_rain': {'precip_percentile': 80, 'min_days': 2}
}

# Assuming df is a pandas DataFrame with 'date' and 'precipitation' columns
# Placeholder for demonstration purposes
data = {'date': pd.to_datetime(pd.date_range(start='2023-01-01', periods=100)),
        'precipitation': np.random.rand(100) * 10}
df = pd.DataFrame(data)

# Placeholder for demonstration purposes
def analyze_trends(df):
    # Dummy implementation
    return None, "No trend analysis performed", 0, 0, 0

# Placeholder for demonstration purposes
def plot_hazard_trends(yearly_stats, trend_statement, hazard_type, slope, intercept, r_value):
    print(f"Plotting trends for {hazard_type}")

# Placeholder for demonstration purposes
class MockButton:
    def on_click(self, func):
        self._callback = func

analyze_button = MockButton()

# Complete or partial definition of detect_hazards function
def detect_hazards(df, hazard_type):
    hazards = []
    # Assuming there's a previous if or initial code here
    # if hazard_type == 'some_other_type':
    #     pass
    # else: # or just starting here without a previous condition
    if hazard_type == 'drought': # Correctly indented
        threshold_precip = np.percentile(df['precipitation'].dropna(),
                                          HAZARD_THRESHOLDS['drought']['precip_percentile'])

        below_threshold = df['precipitation'] < threshold_precip
        groups = below_threshold.ne(below_threshold.shift()).cumsum()
        counts = groups.where(below_threshold).value_counts()

        for group_idx, days in counts.items():
            if days >= HAZARD_THRESHOLDS['drought']['min_duration']:
                group_dates = df[groups == group_idx]['date']
                hazards.append({
                    'type': 'drought',
                    'start_date': group_dates.min(),
                    'end_date': group_dates.max(),
                    'duration': days,
                    'intensity': df[groups == group_idx]['precipitation'].mean()
                })

    elif hazard_type == 'heavy_rain': # Correctly indented, aligned with the first elif
        threshold_precip = np.percentile(df['precipitation'].dropna(),
                                          HAZARD_THRESHOLDS['heavy_rain']['precip_percentile'])

        above_threshold = df['precipitation'] > threshold_precip
        groups = above_threshold.ne(above_threshold.shift()).cumsum()
        counts = groups.where(above_threshold).value_counts()

        for group_idx, days in counts.items():
            if days >= HAZARD_THRESHOLDS['heavy_rain']['min_days']:
                group_dates = df[groups == group_idx]['date']
                hazards.append({
                    'type': 'heavy_rain',
                    'start_date': group_dates.min(),
                    'end_date': group_dates.max(),
                    'duration': days,
                    'intensity': df[groups == group_idx]['precipitation'].mean()
                })

    return pd.DataFrame(hazards)

# Complete or partial definition of on_analyze_button_clicked function
# This function is likely triggered by a button click in an interactive environment
def on_analyze_button_clicked(b):
    # Assuming hazard_type and hazards_df are available in this scope
    # For demonstration, let's assume hazard_type is a simple string or has a .value attribute
    class MockHazardType:
        def __init__(self, value):
            self.value = value
    hazard_type = MockHazardType('heavy_rain') # Example hazard type
    hazards_df = detect_hazards(df, hazard_type.value) # Call the detect_hazards function

    if hazards_df.empty: # Correctly indented within the function
        print(f"No {hazard_type.value} events detected in the selected range.")
        return

    # Analyze trends
    yearly_stats, trend_statement, slope, intercept, r_value = analyze_trends(hazards_df)

    # Display results
    print(f"Detected {len(hazards_df)} {hazard_type.value} events.")
    display(hazards_df)
    display(yearly_stats)

    # Plot trends
    plot_hazard_trends(yearly_stats, trend_statement, hazard_type.value, slope, intercept, r_value)

# Bind the button click event - This line should be outside the function definition
analyze_button.on_click(on_analyze_button_clicked)

# To test the on_analyze_button_clicked function manually (optional)
# on_analyze_button_clicked(None) # Pass a dummy argument as the function expects one from the button click